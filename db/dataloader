#!/usr/bin/perl

use strict;
use warnings;
use Log::Log4perl qw( get_logger );
use DBI;
use Data::Dumper;

### BEGIN CONFIGURATION
#

my $log_config = q(
  log4perl.rootLogger = DEBUG, screen

  log4perl.appender.screen        = Log::Log4perl::Appender::Screen
  log4perl.appender.screen.stderr = 0
  log4perl.appender.screen.layout = Log::Log4perl::Layout::SimpleLayout
);

my $dest_db = {
  dsn      => 'DBI:mysql:database=giftreg;host=dusty',
  username => 'giftreg',
  password => 'wrQ0weZ43f7SmDzPJc7xYnuNx',
};

my $source_db = {
  dsn      => 'DBI:Oracle:DEV',
  username => 'GIFTREG_APP',
  password => 's0mepassw0rd',
};

$ENV{'TNS_ADMIN'} = '/opt/oracle/instantclient_11_2';

#
### END CONFIGURATION

my ($source_dbh, $dest_dbh);

# Sets a sequence in the destination database so that the next value
# fetched will be larger than the maximum value in a column of a table.
sub SetSequenceNextval {
  my ($table, $column, $sequence) = @_;
  my $log = get_logger((caller(0))[3]);

  $log->info("setting nextval for sequence $sequence");

  # Get the maximum column value.
  my $row = $dest_dbh->selectrow_arrayref(
    "SELECT MAX($column) FROM $table"
  );
  my $max_column_value = $row->[0];
  if( !defined $max_column_value ) {
    $log->warn("no column values for $table.$column, " .
               "not altering sequence $sequence");
    return;
  }
  $log->debug("max($column) in $table is $max_column_value");

  # Get the next value from the sequence, then alter the 'INCREMENT BY'
  # so the next select makes it the maximum column value, then do that select.
  $row = $dest_dbh->selectrow_arrayref("SELECT $sequence.NEXTVAL FROM DUAL");
  my $sequence_nextval = $row->[0];
  if( !defined $sequence_nextval ) {
    $log->error("can't get nextval for sequence $sequence");
    return;
  }
  $log->debug("nextval for sequence $sequence is $sequence_nextval");

  my $difference = $max_column_value - $sequence_nextval;
  $log->debug("setting increment by (temporarily) to $difference");
  $dest_dbh->do("ALTER SEQUENCE $sequence INCREMENT BY $difference");
  $dest_dbh->selectrow_arrayref("SELECT $sequence.NEXTVAL FROM DUAL");
  $dest_dbh->do("ALTER SEQUENCE $sequence INCREMENT BY 1");

  $log->info("nextval for sequence $sequence will be ",
             $max_column_value + 1);
}

sub CopyTable {
  my ($source_table, $dest_table, $column_mapping, $insert_for_column) = @_;
  if( !defined $insert_for_column ) {
    $insert_for_column = {};
  }
  my $log = get_logger((caller(0))[3]);

  $log->info("copying table $source_table to $dest_table");

  # The column mapping is from source to destination, but make a version
  # that does the reverse.
  my %dest_column_for = %{$column_mapping};
  my %src_column_for =
    map { $column_mapping->{$_} => $_ } keys %{$column_mapping};
  # Column lists, for convenience.
  my @src_columns = keys %dest_column_for;
  my @dest_columns = keys %src_column_for;

  # Prepare the select statement for the source table.
  my $select_sql = 'SELECT ' . join(', ', @src_columns) .
                   " FROM $source_table";
  $log->debug($select_sql);
  my $select_sth = $source_dbh->prepare($select_sql);

  # Prepare the insert statement for the destination table.
  my $insert_sql = "INSERT INTO $dest_table (" . join(', ', @dest_columns) .
                   ') VALUES (' . join(', ', map {
                     $insert_for_column->{$_} || '?'
                   } @dest_columns) . ')';
  $log->debug($insert_sql);
  my $insert_sth = $dest_dbh->prepare($insert_sql);

  # Loop through each row in the source table, inserting it into the
  # destination table. This isn't terribly efficient, but the tables are
  # hopefully small.
  my $rows = 0;
  $select_sth->execute;
  while( my $row = $select_sth->fetchrow_hashref ) {
    # Use the row results as the bind values for the insert statement, but
    # convert any undef values to 'NULL'.
    my @bind_values = map {
      $row->{$src_column_for{$_}};
    } @dest_columns;

    $insert_sth->execute(@bind_values);

    $rows++;
  }

  $log->info("inserted $rows rows into $dest_table");
}


# main()

Log::Log4perl::init(\$log_config);
my $log = get_logger('');

# Connect to both source and destination databases.
$source_dbh = DBI->connect($source_db->{dsn}, $source_db->{username},
                              $source_db->{password}, { RaiseError => 1 });
$log->info("connected to source db");

$dest_dbh = DBI->connect($dest_db->{dsn}, $dest_db->{username},
                            $dest_db->{password}, { RaiseError => 1 });
$log->info("connected to destination db");

CopyTable('GIFTREG_SCHEMA.PERSON', 'person', {
  PERSON_ID      => 'person_id',
  EMAIL_ADDRESS  => 'email_address',
  PASSWORD       => 'password',
  LAST_UPDATE_DT => 'last_update_dt',
});

CopyTable('GIFTREG_SCHEMA.GIFT', 'gift', {
  GIFT_ID             => 'gift_id',
  SHORT_DESC          => 'short_desc',
  LONG_DESC           => 'long_desc',
  LOCATION            => 'location',
  WANTED_BY_PERSON_ID => 'wanted_by_person_id',
  BOUGHT_BY_PERSON_ID => 'bought_by_person_id',
  PRIORITY_NBR        => 'priority_nbr',
});

$log->info("finished");
